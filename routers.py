import asyncio
import logging
from datetime import datetime

from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.utils.chat_action import ChatActionSender
from aiogram import Bot, Router, types, F

from chat_with_gpt import ans_from_gpt
import config

router = Router(name=__name__)
logger = logging.getLogger(__name__)


@router.message(F.text, Command("start"))
async def start(message: types.Message):
    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    if first_name is not None or last_name is not None:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {'' if first_name is None else first_name} "
            f"{'' if last_name is None else last_name}‚ùó"
        )
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {username}‚ùó")

    await message.answer("–Ø —Ç–≤–æ–π —É–º–Ω—ã–π –ò–ò-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! "
                         "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ?")


@router.message(F.text)
async def conversation_with_gpt(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞"""
    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )
    logger.info(
        f"id: {message.from_user.id}, message: {message.text}, datetime: {datetime.now()}"
    )

    msg = await message.answer(
        "–î–∞–π—Ç–µ –º–Ω–µ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—åü§î. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 15-20 —Å–µ–∫—É–Ω–¥."
    )
    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )
    response = await ans_from_gpt(message.from_user.id, message.text)
    await message.reply(response)
    await bot.delete_message(message.chat.id, msg.message_id)
